function create_post_java(general, parameters)
    % Define the Java code as a cell array of strings
    
    % Add quotes around each string
    quotedParameters = cellfun(@(s) ['"' s '"'], parameters, 'UniformOutput', false);

    % Combine the quoted strings into a single string
    result = strjoin(quotedParameters, ', ');

    %['      String batch_file = "' general.paths.cluster_batch_path '";'], ...  % Concatenate the batch_path variable
    post_java_code = { ...
        'package macro;', ...
        '', ...
        'import java.io.*;', ...
        'import java.util.*;', ...
        'import javax.swing.*;', ...
        '', ...
        'import star.common.*;', ...
        'import star.base.query.*;', ...
        'import star.base.neo.*;', ...
        'import star.base.report.*;', ...
        'import star.flow.*;', ...
        'import star.vis.*;', ...
        'import star.prismmesher.*;', ...
        'import star.meshing.*;', ...
        '', ...
        'public class post extends StarMacro {', ...
        '', ...
        '  public void execute() {', ...
        '    try{', ...
        ['       String batch_file = "' general.paths.cluster_batch_path '";'], ...
        '		BufferedReader br = new BufferedReader(new FileReader(batch_file));', ...
        '		Batch sheet = new Batch();', ...
        '		sheet.header = br.readLine().split(",");', ...
        '		String line = "";', ...
        '		while ((line = br.readLine()) != null){', ...
        '			sheet.row = line.split(",");', ...
        '			//mySim.println(sheet.col("postprocess"));', ...
        '			if (Integer.parseInt(sheet.col("postprocess")) == 1){', ...
        '				Simulation mySim = open_starccm_sim(sheet);', ...
        '				post_process(sheet,mySim);', ...
        '			}', ...
        '		}', ...
        '	}', ...
        '	catch (IOException e){e.printStackTrace();}   ', ...
        '  }', ...
        '', ...
        '  public class Batch{', ...
        '	  String[] header;', ...
        '	  String[] row;', ...
        ' 	  private String col(String filter){', ...
        '		List<String> string_list = Arrays.asList(header);', ...
        ' 		return row[string_list.indexOf(filter)];', ...
        '    }', ...
        '   }', ...
        '', ...
        'private Simulation open_starccm_sim(Batch sheet) {', ...
        '	String case_name = sheet.col("sim.files.folder");', ...
        '	String case_path = sheet.col("sim.files.setup_path");', ...
        '	', ...
        '	File sim_path = new File(resolvePath(case_path+"/"+case_name+"/"));', ...
        '	String[] sim_files = sim_path.list(new FilenameFilter() {', ...
        '    public boolean accept(File sim_path, String fileName) {', ...
        '        return fileName.endsWith(".sim") && fileName.contains("@");', ...
        '    }});', ...
        '	', ...
        '	Simulation mySim = getActiveSimulation();', ...
        '	mySim.println(sim_files[0]);', ...
        '	mySim.println(sim_files.length);', ...
        '	// int iter_num = 0;', ...
        '	// for (int i = 0; i < sim_files.length; i++) {', ...
        '	// 	int sim_iter_num = Integer.parseInt(sim_files[i].substring(sim_files[i].indexOf("@"+1),sim_files[i].indexOf(".sim")));', ...
        '	// 	if(iter_num < sim_iter_num) {', ...
        '	// 		iter_num = sim_iter_num;', ...
        '	// 	}', ...
        '	// }', ...
        '	// String sim_file = case_name+"@"+iter_num+".sim";', ...
        '	Simulation simulation_0 = new Simulation(resolvePath(case_path+"/"+case_name+"/"+sim_files[0]));', ...
        '	return simulation_0;', ...
        '}', ...
        '', ...
        '// Example method to obtain a GlobalParameterBase by name (placeholder)', ...
        'private GlobalParameterBase getGlobalParameterByName(GlobalParameterManager manager, String name) {', ...
        '    // This method should implement logic to find and return the GlobalParameterBase based on the name', ...
        '    // Placeholder implementation', ...
        '    for (Object obj : manager.getChildren()) {', ...
        '        if (obj instanceof GlobalParameterBase) {', ...
        '            GlobalParameterBase param = (GlobalParameterBase) obj;', ...
        '            if (param.getPresentationName().equals(name)) {', ...
        '                return param;', ...
        '            }', ...
        '        }', ...
        '    }', ...
        '    return null;', ...
        '}', ...
        '', ...
        'private void post_process(Batch sheet, Simulation simulation_0) {', ...
        '', ...
        '	String case_name = sheet.col("sim.files.folder");', ...
        '	String case_path = sheet.col("sim.files.setup_path");', ...
        '', ...
        '	//Create folder structures', ...
        '    File path_name = new File(case_path);', ...
        '	if (! path_name.exists()) {', ...
        '		path_name.mkdir();', ...
        '	}', ...
        '    File folder_name = new File(resolvePath(case_path+"/"+case_name));', ...
        '    folder_name.mkdir();', ...
        '    File reports_name = new File(resolvePath(case_path+"/"+case_name+"/Reports"));', ...
        '    reports_name.mkdir();', ...
        '    File pictures_name = new File(resolvePath(case_path+"/"+case_name+"/Pictures"));', ...
        '    pictures_name.mkdir();', ...
        '    File plots_name = new File(resolvePath(case_path+"/"+case_name+"/Plots"));', ...
        '    plots_name.mkdir();', ...
        '	File monitors_name = new File(resolvePath(case_path+"/"+case_name+"/Monitors"));', ...
        '    monitors_name.mkdir();', ...
        '    File parameters_name = new File(resolvePath(case_path+"/"+case_name+"/Parameters"));', ...
        '    parameters_name.mkdir();', ...
        '', ...
        '	// Retrieve the GlobalParameterManager', ...
        '	GlobalParameterManager globalParamManager = simulation_0.getGlobalParameterManager();', ...
        '', ...
        '	// Obtain all parameters', ...
        '	Collection<Object> parameters = globalParamManager.getChildren();', ...
        '', ...
        '	// Create a map to associate object names with GlobalParameterBase instances', ...
        '	Map<String, GlobalParameterBase> parameterMap = new HashMap<>();', ...
        '	', ...
        '	// Populate the map', ...
        '	for (Object obj : parameters) {', ...
        '		String objString = obj.toString(); // Or use a different method to get the name', ...
        '		GlobalParameterBase parameter = getGlobalParameterByName(globalParamManager, objString);', ...
        '		if (parameter != null) {', ...
        '			parameterMap.put(objString, parameter);', ...
        '		}', ...
        '	}', ...
        '', ...
        '	// Prepare the CSV file for writing', ...
        '	File csvFile = new File(case_path+"/"+case_name+"/"+"Parameters/parameters.csv");', ...
        '', ...
        '	try (PrintWriter writer = new PrintWriter(csvFile)) {', ...
        ['		Set<String> desiredParameterNames = new LinkedHashSet<>(Arrays.asList(' result '));'], ...
        '		simulation_0.println(desiredParameterNames);', ...
        '', ...
        '		// Write CSV header', ...
        '		writer.println("Parameter Name, Quantity");', ...
        '', ...
        '		for (String paramName : desiredParameterNames) {', ...
        '			GlobalParameterBase parameter = parameterMap.get(paramName);', ...
        '', ...
        '			if (parameter != null) {', ...
        '				String parameterName = parameter.getPresentationName();', ...
        '				CompiledValueFunction quantity = parameter.getQuantity();', ...
        '', ...
        '				if (quantity != null) {', ...
        '					writer.println(parameterName + ", " + quantity.toString());', ...
        '					simulation_0.println("Parameter: " + parameterName);', ...
        '					simulation_0.println("Quantity: " + quantity.toString());', ...
        '				} else {', ...
        '					writer.println(parameterName + ", No quantity available");', ...
        '				}', ...
        '			} else {', ...
        '				writer.println(paramName + ", Parameter not found");', ...
        '			}', ...
        '		}', ...
        '		simulation_0.println("Data successfully exported to " + csvFile.getAbsolutePath());', ...
        '	} catch (IOException e) {', ...
        '		simulation_0.println("Error writing to CSV file: " + e.getMessage());', ...
        '		e.printStackTrace();', ...
        '	}', ...
        '', ...
        '	//Export Monitors', ...
        '	//Export Plots', ...
        '	Collection<Monitor> monitors = simulation_0.getMonitorManager().getMonitors();', ...
        '	for(Monitor mon_iter : monitors) {', ...
        '		String mon_name = mon_iter.getPresentationName().replace(" ","_");', ...
        '		mon_iter.export(resolvePath(case_path+"/"+case_name+"/Monitors/"+mon_name+".csv"));', ...
        '	}', ...
        '', ...
        '	//Export Plots', ...
        '	Collection<StarPlot> plots = simulation_0.getPlotManager().getPlots();', ...
        '	for(StarPlot plot_iter : plots) {', ...
        '		String plot_name = plot_iter.getPresentationName().replace(" ","_");', ...
        '		plot_iter.encode(resolvePath(case_path+"/"+case_name+"/Plots/"+plot_name+".png"), "png", 1920, 1080, true, false);', ...
        '		plot_iter.export(resolvePath(case_path+"/"+case_name+"/Plots/"+plot_name+".csv"), ",");', ...
        '	}', ...
        '', ...
        '	//Export Scenes', ...
        '	Collection<Scene> scenes = simulation_0.getSceneManager().getScenes();', ...
        '	for(Scene scene_iter : scenes) {', ...
        '		String scene_name = scene_iter.getPresentationName().replace(" ","_");', ...
        '		scene_iter.printAndWait(resolvePath(case_path+"/"+case_name+"/Pictures/"+scene_name+".png"), 1, 1920, 1080, true, false);', ...
        '	}', ...
        '', ...
        '	//Export Reports', ...
        '	Collection<Report> reports = simulation_0.getReportManager().getObjects();', ...
        '	ArrayList<Report> reports_list = new ArrayList<>(reports);', ...
        '	//Export Reports to Individual Files', ...
        '	try{', ...
        '		for(int i = 0; i < reports_list.size(); i++) {', ...
        '			String report_name = reports_list.get(i).getPresentationName().replace(" ","_");', ...
        '			reports_list.get(i).printReport(resolvePath(case_path+"/"+case_name+"/Reports/"+report_name+".txt"), false);', ...
        '		}', ...
        '	} catch(Exception e){}', ...
        '', ...
        '	//Export All Reports to Single File (csv) ', ...
        '	try{', ...
        '		File reports_file = new File(resolvePath(case_path+"/"+case_name+"/Reports/reports.csv"));', ...
        '		PrintWriter pw = new PrintWriter(reports_file);', ...
        '		//Header', ...
        '		StringBuilder line_header = new StringBuilder();', ...
        '		for(int i = 0; i < reports_list.size(); i++) {', ...
        '	    	line_header.append(reports_list.get(i).getPresentationName().replace(" ","_"));', ...
        '	    	if (i != reports_list.size() - 1) {', ...
        '	        	line_header.append(",");', ...
        '	    	}', ...
        '		}', ...
        '		line_header.append("\n");', ...
        '		pw.write(line_header.toString());', ...
        '		//Data', ...
        '		StringBuilder line_data = new StringBuilder();', ...
        '		for (int i = 0; i < reports_list.size(); i++) {', ...
        '	    	line_data.append(reports_list.get(i).monitoredValue());', ...
        '	    	if (i != reports_list.size() - 1) {', ...
        '				line_data.append(",");', ...
        '	    	}', ...
        '		}', ...
        '		line_data.append("\n");', ...
        '		pw.write(line_data.toString());', ...
        '		pw.close();', ...
        '	} catch(Exception e){}', ...
        '', ...
        '	simulation_0.kill();', ...
        '}', ...
        '}', ...

    };
    
    % Concatenate the lines into a single string with newline characters
    file_path = fullfile(general.paths.local_directory_path, 'post.java');
   
    % Open file for writing
    fid = fopen(file_path, 'w');
    if fid == -1
        error('Cannot open file for writing: %s', file_path);
    end

    % Write Java code to file
    for i = 1:length(post_java_code)
        fprintf(fid, '%s\n', post_java_code{i});
    end
    
    % Close file
    fclose(fid);
end